public class Solution {

    public int incrementEven(int element){
        if(element % 2 == 0 ){
            return 1 ;
        }
        else{
            return 0 ;
        }
    }

    public int[] prefixEvenCount( int[] data ){
        int size = data.length ;
        int[] evenArray = new int[size] ;
        evenArray[0] = incrementEven(data[0]) ;
        for(int i = 1 ; i < size ; i ++ ){
            evenArray[i] = evenArray[i-1] + incrementEven(data[i]) ;
        }
        return evenArray ;
    }

    public int evenCount( int[] prefixEvenArray, int start, int end ){
        if(start == 0){
            return prefixEvenArray[end] ;
        }
        else{
            return prefixEvenArray[end] - prefixEvenArray[start-1] ;
        }
    }

    public int[] solve(int[] A, int[][] B) {
        int size = A.length ;
        int[] prefixEvenArray = prefixEvenCount(A) ;
        int queries = B.length ;
        int[] output = new int[queries] ;
        for(int i = 0 ; i < queries ; i ++ ){
            output[i] = evenCount(prefixEvenArray,  B[i][0], B[i][1]) ;
        }
        return output ;
    }
}
